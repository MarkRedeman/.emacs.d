;;; ofc-semantic-php.wy -- LALR grammar for PHP 5.5

%package ofc-semantic-php-wy
%provide ofc-semantic-php-wy

%languagemode php-mode

;; The default start symbol
%start grammar

;; Alternate entry points, for partial re-parse
%start compilation_unit
%start compilation_unit_list
%start use_declaration
%start class_declaration
%start require_declaration
%start namespace_declaration
%start class_member_declaration
;; %start namespace_member_declaration


;; Literals
%type  <symbol>  ;;syntax "\\(\\$?[a-zA-Z_][a-zA-Z0-9_]+\\)"
%token <symbol>  T_STRING

%type  <string> syntax "\\(\\s\"\\|'\\)" matchdatatype sexp
%token <string> T_CONSTANT_ENCAPSED_STRING

%type  <number>
%token <number>  T_NUMBER

;; Don't generate these analyzers which needs special handling code.
;; This sucker needs special handling.
%type  <code>
%token <code>    T_NS_SEPARATOR         "\\"
%token <code>    T_OPEN_TAG             "<?php"
%token <code>    T_CLOSE_TAG            "?>"

;; Blocks & Parenthesis
%type  <block>
%token <block>  PAREN_BLOCK "(PAREN_OPEN PAREN_CLOSE)"
%token <block>  BRACE_BLOCK "(BRACE_OPEN BRACE_CLOSE)"
%token <block>  BRACK_BLOCK "(BRACK_OPEN BRACK_CLOSE)"

%token <open-paren>   PAREN_OPEN  "("
%token <close-paren>  PAREN_CLOSE ")"
%token <open-paren>   BRACE_OPEN  "{"
%token <close-paren>  BRACE_CLOSE "}"
%token <open-paren>   BRACK_OPEN  "["
%token <close-paren>  BRACK_CLOSE "]"


;; Punctuations
%type  <punctuation>
%token <punctuation> T_OBJECT_OPERATOR      "->"
%token <punctuation> T_SEMICOLON            ";"
%token <punctuation> T_PAAMAYIM_NEKUDOTAYIM "::"
%token <punctuation> T_INC                  "++"
%token <punctuation> T_DEC                  "--"
%token <punctuation> T_IS_IDENTICAL         "==="
%token <punctuation> T_IS_NOT_IDENTICAL     "!=="
%token <punctuation> T_IS_EQUAL             "=="
%token <punctuation> T_IS_NOT_EQUAL         "!="
%token <punctuation> T_IS_NOT_EQUAL         "<>"
%token <punctuation> T_IS_SMALLER_OR_EQUAL  "<="
%token <punctuation> T_IS_GREATER_OR_EQUAL  ">="
%token <punctuation> T_SPACESHIP            "<=>"
%token <punctuation> T_PLUS_EQUAL           "+="
%token <punctuation> T_MINUS_EQUAL          "-="
%token <punctuation> T_MUL_EQUAL            "*="
%token <punctuation> T_DIV_EQUAL            "/="
%token <punctuation> T_CONCAT_EQUAL         ".="
%token <punctuation> T_MOD_EQUAL            "%="
%token <punctuation> T_SL_EQUAL             "<<="
%token <punctuation> T_SR_EQUAL             ">>="
%token <punctuation> T_AND_EQUAL            "&="
%token <punctuation> T_OR_EQUAL             "|="
%token <punctuation> T_XOR_EQUAL            "^="
%token <punctuation> T_BOOLEAN_OR           "||"
%token <punctuation> T_BOOLEAN_AND          "&&"
%token <punctuation> T_SL                   "<<"
%token <punctuation> T_SR                   ">>"
%token <punctuation> T_DOUBLE_ARROW         "=>"
%token <punctuation> T_HEREDOC              "<<<"
%token <punctuation> T_NOT         	    "!"
%token <punctuation> T_MOD         	    "%"
%token <punctuation> T_AND         	    "&"
%token <punctuation> T_MULT        	    "*"
%token <punctuation> T_PLUS        	    "+"
%token <punctuation> T_COMMA       	    ","
%token <punctuation> T_MINUS       	    "-"
%token <punctuation> T_DOT         	    "."
%token <punctuation> T_DIV         	    "/"
%token <punctuation> T_COLON       	    ":"
%token <punctuation> T_LT          	    "<"
%token <punctuation> T_EQUAL          	    "="
%token <punctuation> T_GT          	    ">"
%token <punctuation> T_URSHIFT     	    ">>>"
%token <punctuation> T_URSHIFTEQ   	    ">>>="
%token <punctuation> T_QUESTION    	    "?"
%token <punctuation> T_XOR         	    "^"
%token <punctuation> T_OR          	    "|"
%token <punctuation> T_COMP        	    "~"
%token <punctuation> T_ASTERISK        	    "@"
%token <punctuation> T_DOLLAR               "$"
%token <punctuation> T_ELLIPSIS             "..."
%token <punctuation> T_COALESCE             "??"
%token <punctuation> T_POW                  "**"
%token <punctuation> T_POW_EQUAL            "**="


;; Keywords
%type    <keyword>
%keyword T_INT_CAST          "(int)"
%keyword T_DOUBLE_CAST       "(double)"
%keyword T_STRING_CAST       "(string)"
%keyword T_ARRAY_CAST        "(array)"
%keyword T_OBJECT_CAST       "(object)"
%keyword T_BOOL_CAST         "(bool)"
%keyword T_UNSET_CAST        "(unset)"
%keyword T_EXIT              "exit"
%keyword T_EXIT              "die"
%keyword T_FUNCTION          "function"
%keyword T_CONST             "const"
%keyword T_RETURN            "return"
%keyword T_TRY               "try"
%keyword T_CATCH             "catch"
%keyword T_THROW             "throw"
%keyword T_IF                "if"
%keyword T_ELSEIF            "elseif"
%keyword T_ENDIF             "endif"
%keyword T_ELSE              "else"
%keyword T_WHILE             "while"
%keyword T_ENDWHILE          "endwhile"
%keyword T_DO                "do"
%keyword T_FOR               "for"
%keyword T_ENDFOR            "endfor"
%keyword T_FOREACH           "foreach"
%keyword T_ENDFOREACH        "endforeach"
%keyword T_DECLARE           "declare"
%keyword T_ENDDECLARE        "enddeclare"
%keyword T_INSTANCEOF        "instanceof"
%keyword T_AS                "as"
%keyword T_SWITCH            "switch"
%keyword T_ENDSWITCH         "endswitch"
%keyword T_CASE              "case"
%keyword T_DEFAULT           "default"
%keyword T_BREAK             "break"
%keyword T_CONTINUE          "continue"
%keyword T_ECHO              "echo"
%keyword T_PRINT             "print"
%keyword T_CLASS             "class"
%keyword T_INTERFACE         "interface"
%keyword T_EXTENDS           "extends"
%keyword T_IMPLEMENTS        "implements"
%keyword T_NEW               "new"
%keyword T_CLONE             "clone"
%keyword T_VAR               "var"
%keyword T_EVAL              "eval"
%keyword T_INCLUDE           "include"
%keyword T_INCLUDE_ONCE      "include_once"
%keyword T_REQUIRE           "require"
%keyword T_REQUIRE_ONCE      "require_once"
%keyword T_GLOBAL            "global"
%keyword T_ISSET             "isset"
%keyword T_EMPTY             "empty"
%keyword T_HALT_COMPILER     "__halt_compiler"
%keyword T_STATIC            "static"
%keyword T_ABSTRACT          "abstract"
%keyword T_FINAL             "final"
%keyword T_PRIVATE           "private"
%keyword T_PROTECTED         "protected"
%keyword T_PUBLIC            "public"
%keyword T_UNSET             "unset"
%keyword T_LIST              "list"
%keyword T_ARRAY             "array"
%keyword T_LOGICAL_OR        "or"
%keyword T_LOGICAL_AND       "and"
%keyword T_LOGICAL_XOR       "xor"
%keyword T_CLASS_C           "__CLASS__"
%keyword T_FUNC_C            "__FUNCTION__"
%keyword T_METHOD_C          "__METHOD__"
%keyword T_LINE              "__LINE__"
%keyword T_FILE              "__FILE__"
%keyword T_NAMESPACE         "namespace"
%keyword T_NS_C              "__NAMESPACE__"
%keyword T_CALLABLE          "callable"
%keyword T_USE               "use"
%keyword T_FINALLY           "finally"
%keyword T_GOTO              "goto"
%keyword T_YIELD             "yield"

%put     T_USE summary
"Import a class to the current scope: use {class|interface} [as <name>][, ...];"
%put     T_STATIC summary
"Declaration modifier: static {class|interface|<type>} <name> ..."
%put     T_ABSTRACT summary
"Class|Method declaration modifier: abstract {class|<type>} <name> ..."
%put     T_FINAL summary
"Class|Member declaration modifier: final {class|<type>} <name> ..."
%put     T_PRIVATE summary
"Access level modifier: private {class|interface|<type>} <name> ..."
%put     T_PROTECTED summary
"Access level modifier: protected {class|interface|<type>} <name> ..."
%put     T_PUBLIC summary
"Access level modifier: public {class|interface|<type>} <name> ..."
%put     T_IMPLEMENTS summary
"Class SuperInterfaces declaration: implements <name> [, ...]"
%put     T_CONST summary
"Unused reserved word"
%put     T_RETURN summary
"return [<expr>] ;"
%put     T_TRY summary
"try {<stmts>} [catch(<parm>) {<stmts>} ...] [finally {<stmts>}]"
%put     T_CATCH summary
"try {<stmts>} catch(<parm>) {<stmts>} ... "
%put     T_IF summary
"if (<expr>) <stmt> [else <stmt>]"
%put     T_ELSE summary
"if (<expr>) <stmt> else <stmt>"
%put     T_WHILE summary
"while (<expr>) <stmt> | do <stmt> while (<expr>);"
%put     T_DO summary
"do <stmt> while (<expr>);"
%put     T_FOR summary
"for ([<init-expr>]; [<expr>]; [<update-expr>]) <stmt>"
%put     T_CASE summary
"switch(<expr>) {case <const-expr>: <stmts> ... }"
%put     T_DEFAULT summary
"switch(<expr>) { ... default: <stmts>}"
%put     T_BREAK summary
"break [<label>] ;"
%put     T_CONTINUE summary
"continue [<label>] ;"
%put     T_CLASS summary
"Class declaration: class <name>"
%put     T_INTERFACE summary
"Interface declaration: interface <name>"
%put     T_EXTENDS summary
"SuperClass|SuperInterfaces declaration: extends <name> [, ...]"


;; Precedence definitions
%left T_INCLUDE T_INCLUDE_ONCE T_EVAL T_REQUIRE T_REQUIRE_ONCE
%left T_COMMA
%left T_LOGICAL_OR
%left T_LOGICAL_XOR
%left T_LOGICAL_AND
%right T_PRINT
%right T_YIELD
%right T_DOUBLE_ARROW
%left T_EQUAL T_PLUS_EQUAL T_MINUS_EQUAL T_MUL_EQUAL T_DIV_EQUAL T_CONCAT_EQUAL T_MOD_EQUAL T_AND_EQUAL T_OR_EQUAL T_XOR_EQUAL T_SL_EQUAL T_SR_EQUAL T_POW_EQUAL
%left T_QUESTION T_COLON
%right T_COALESCE
%left T_BOOLEAN_OR
%left T_BOOLEAN_AND
%left T_OR
%left T_XOR
%left T_AND
%nonassoc T_IS_EQUAL T_IS_NOT_EQUAL T_IS_IDENTICAL T_IS_NOT_IDENTICAL T_SPACESHIP
%nonassoc T_LT T_IS_SMALLER_OR_EQUAL T_GT T_IS_GREATER_OR_EQUAL
%left T_SL T_SR
%left T_PLUS T_MINUS T_DOT
%left T_MULT T_DIV T_MOD
%right T_NOT
%nonassoc T_INSTANCEOF
%right T_COMP T_INC T_DEC T_INT_CAST T_DOUBLE_CAST T_STRING_CAST T_ARRAY_CAST T_OBJECT_CAST T_BOOL_CAST T_UNSET_CAST T_ASTERISK
%right T_POW
%right LBRACK
%nonassoc T_NEW T_CLONE
%left T_ELSEIF
%left T_ELSE
%left T_ENDIF
%right T_STATIC T_ABSTRACT T_FINAL T_PRIVATE T_PROTECTED T_PUBLIC

%%


;;; Preamble
;; NOTE In the definitions below, some statements are
;; followed by an elisp form. This instructs the Semantic
;; parser what are the semantics of the parsed node.
;;
;; Forms in CALL-CAPS are part of Wisent and can be explained
;; with C-h f `wisent-grammar-', followed by the name of the tag.
;; Those forms are expanded into macros to declare different classes
;; of Semantic tags, or perform actions on the AST.
;;
;; See `cedet/semantic/grammar.el' in your Emacs sources for
;; a reference to the functions used in this file.


;; Top level rules

;; Matches the php opening tag <? and <?php followed by any number
;; of compilation units.
grammar
  : T_OPEN_TAG compilation_unit_list T_CLOSE_TAG
    (identity $2)
  | T_OPEN_TAG compilation_unit_list
    (identity $2)
  ;

compilation_unit_list
  : ;; empty
  | compilation_unit compilation_unit_list
    (if $2 (append $2 (EXPANDTAG $1)) (EXPANDTAG $1))
  ;

compilation_unit
  : use_declaration
  | namespace_declaration
  ;


;; Use directive
use_declaration
  : T_USE aliased_name T_SEMICOLON
    (INCLUDE-TAG $2 nil)
  ;

use_declaration_list
  : aliased_name
    (identity $1)
  | aliased_name T_COMMA use_declaration_list
    (identity $1)
  ;

aliased_name
  : qualified_name
    (identity $1)
  | qualified_name T_AS T_STRING
    (identity $3)
  ;


;; Namespace declarations
namespace_declaration
  : T_NAMESPACE qualified_name namespace_body
    (TYPE-TAG $2 "namespace" (unless (equal ";" $3) $3) nil)
  ;

namespace_body
  : ignored_block
    ()
  | T_SEMICOLON
  ;

;; Qualified names
qualified_name
  : T_STRING
    (identity $1)
  | qualified_name T_NS_SEPARATOR T_STRING
    (concat $1 $2 $3)
  | T_NS_SEPARATOR qualified_name T_NS_SEPARATOR T_STRING
    (concat $2 $3 $4)
  ;

qualified_name_list
  : qualified_name
    (list $1)
  | qualified_name T_COMMA qualified_name_list
    (append (list $1) $3)
  ;

;; Includes
require_declaration
  : T_REQUIRE require_expr T_SEMICOLON
    (identity $2)
  | T_REQUIRE_ONCE require_expr T_SEMICOLON
    (identity $2)
  | T_INCLUDE require_expr T_SEMICOLON
    (identity $2)
  | T_INCLUDE_ONCE require_expr T_SEMICOLON
    (identity $2)
  ;

require_expr
  : T_CONSTANT_ENCAPSED_STRING
    (INCLUDE-TAG $1 nil)
  | PAREN_BLOCK
    (INCLUDE-TAG $1 nil)
  ;


;;
type_declaration
  : T_SEMICOLON
    ()
  | use_declaration
  | class_declaration
  | namespace_declaration
  ;


;; Classes
class_declaration
  : class_modifiers_opt T_CLASS T_STRING parent_class_opt interfaces_opt class_body
    (TYPE-TAG $3 "class" $6 (if (or $4 $5) (cons $4 $5)) :typemodifiers $1)
  ;

parent_class_opt
  : ;; empty
  | T_EXTENDS qualified_name
    (identity $2)
  ;

interfaces_opt
  : ;; empty
  | T_IMPLEMENTS qualified_name_list
    (nreverse $2)
  ;

class_body
  : BRACE_BLOCK
    (EXPANDFULL $1 class_member_declaration)
  ;

class_member_declaration
  : ;; temprorarily empty
    ()
  ;

class_modifiers_opt
  : ;; empty
  | class_modifiers
    (nreverse $1)
  ;

class_modifiers
  : class_modifiers class_modifier
    (cons $2 $1)
  | class_modifier
    (list $1)
  ;

class_modifier
  : T_FINAL
  | T_ABSTRACT
  ;

ignored_block
  : BRACE_BLOCK
  ;

;; Methods

;; Interfaces

;; Traits

;;

;;; ofc-semantic-php.wy ends here
